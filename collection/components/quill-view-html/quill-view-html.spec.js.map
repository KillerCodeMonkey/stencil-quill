{"version":3,"file":"quill-view-html.spec.js","sourceRoot":"","sources":["../../../src/components/quill-view-html/quill-view-html.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,mBAAmB,CAAC;AAC3D,OAAO,EAAE,WAAW,EAAY,MAAM,uBAAuB,CAAC;AAE9D,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAI,IAAc,CAAC;IAEnB,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,GAAG,MAAM,WAAW,CAAC;YACvB,UAAU,EAAE,CAAC,sBAAsB,CAAC;SACrC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,IAAI,CAAC,UAAU,CAAC,qCAAqC,CAAC,CAAC;QAE7D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,IAAI,CAAC,UAAU,CAAC,4DAA4D,CAAC,CAAC;QAEpF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;KAU7B,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;QACtC,MAAM,IAAI,CAAC,UAAU,CAAC,4DAA4D,CAAC,CAAC;QAEpF,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;QAC7D,SAAS,CAAC,OAAO,GAAG,aAAa,CAAC;QAElC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;KAU7B,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACpC,MAAM,IAAI,CAAC,UAAU,CAAC,gDAAgD,CAAC,CAAC;QAExE,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,MAAM,CAAC;QACjC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,EAAE,CAAC;QAC7B,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { QuillViewHTMLComponent } from './quill-view-html';\nimport { newSpecPage, SpecPage } from '@stencil/core/testing';\n\ndescribe('QuillViewHTMLComponent', () => {\n  let page: SpecPage;\n\n  beforeEach(async () => {\n    page = await newSpecPage({\n      components: [QuillViewHTMLComponent],\n    });\n  });\n\n  it('renders and sets default snow theme class', async () => {\n    await page.setContent('<quill-view-html></quill-view-html>');\n\n    expect(page.root).toEqualHtml(`\n      <quill-view-html>\n        <div class=\"ql-container ql-snow quill-view-html\">\n          <div class=\"ql-editor\"></div>\n        </div>\n      </quill-view-html>\n    `);\n\n    expect(page.rootInstance.theme).toEqual('snow');\n    expect(page.rootInstance.content).toBe(undefined);\n  });\n\n  it('renders initial content', async () => {\n    await page.setContent('<quill-view-html content=\"<p>Hallo</p>\"></quill-view-html>');\n\n    expect(page.root).toEqualHtml(`\n      <quill-view-html content=\"<p>Hallo</p>\">\n        <div class=\"ql-container ql-snow quill-view-html\">\n          <div class=\"ql-editor\">\n            <p>\n              Hallo\n            </p>\n          </div>\n        </div>\n      </quill-view-html>\n    `);\n\n    expect(page.rootInstance.content).toEqual('<p>Hallo</p>');\n  });\n\n  it('renders content update', async () => {\n    await page.setContent('<quill-view-html content=\"<p>Hallo</p>\"></quill-view-html>');\n\n    const quillView = page.body.querySelector('quill-view-html');\n    quillView.content = '<p>test</p>';\n\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <quill-view-html content=\"<p>Hallo</p>\">\n        <div class=\"ql-container ql-snow quill-view-html\">\n          <div class=\"ql-editor\">\n            <p>\n              test\n            </p>\n          </div>\n        </div>\n      </quill-view-html>\n    `);\n\n    expect(page.rootInstance.content).toBe('<p>test</p>');\n  });\n\n  it('renders theme update', async () => {\n    await page.setContent('<quill-view-html content=\"\"></quill-view-html>');\n\n    page.rootInstance.theme = 'test';\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <quill-view-html content=\"\">\n        <div class=\"ql-container ql-test quill-view-html\">\n          <div class=\"ql-editor\"></div>\n        </div>\n      </quill-view-html>\n    `);\n\n    page.rootInstance.theme = '';\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <quill-view-html content=\"\">\n        <div class=\"ql-container ql-snow quill-view-html\">\n          <div class=\"ql-editor\"></div>\n        </div>\n      </quill-view-html>\n    `);\n  });\n});\n"]}